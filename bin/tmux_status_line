#!/usr/bin/env bash
[[ -z $OS ]] && OS="$(uname -s)"

if [[ $OS = "Darwin" ]] && [[ -z $HARDWARE ]]; then
  HARDWARE="$(/usr/sbin/system_profiler SPHardwareDataType | awk '{if (NR==5) print $3}')"
fi


# Load average
function get_load_avg(){
  echo "#[bold][#[default] $(uptime | awk '{print $(NF-2)}') #[bold]]#[default]"
}


# Airport
function get_airport_state(){
  if [[ $OS = "Darwin" ]]; then
    local airport_path="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport"
    local air_info=($(eval "$airport_path" -I | grep -E "^ *(agrCtlRSSI|state|SSID):" | awk '{print $2}'))

    if [ -n $air_info ]; then
      local air_port_
      local rssi=${air_info[0]}
      local state=${air_info[1]}
      local ssid=${air_info[2]}

      if (( ${#ssid} > 20 )); then
        ssid=$(echo $ssid | cut -c 1-20 | sed -e "s/\$/.../")
      fi

      case $state in
        "running" )
          local signals=(▁ ▂ ▄ ▆ █)
          local signal
          rssi_=$(expr 5 - ${rssi} / -20)
          for ((i=0; i<$rssi_; i++)); do
            signal="${signal}${signals[$i]}"
          done
          airport=" #[underscore]${ssid}#[default] | ${signal} "
        ;;
        "init" ) airport="#[fg=yellow] ... #[default]" ;;
        * ) airport="#[fg=red] ✘ #[default]" ;;
      esac
    fi
  fi

  echo "#[bold][#[default]${airport}#[bold]]#[default]"
}


# Sound volume
function get_sound_volume(){
  if [[ $OS = "Darwin" ]]; then
    local sound_info=$(osascript -e 'get volume settings')
    local sound

    if [[ -n $sound_info ]] && [[ "$(echo $sound_info | awk '{print $8}')" = "muted:false" ]]; then
      sound_volume=$(( $(echo $sound_info | awk '{print $2}' | sed "s/[^0-9]//g") / 6))
      local str
      for ((i=0; i<17; i++)); do
        if (($i < $sound_volume)); then
          str="${str}■"
        else
          str="${str} "
        fi
      done
      sound="${str}"
    else
      sound="                 "
    fi
  fi

  echo "#[bold][#[default]${sound}#[bold]]#[default]"
}


# Battery
function get_battery_state(){
  if [[ $OS == "Darwin" ]] || [[ "$HARDWARE" = "MacBook" ]]; then
    local battery_info=$(/usr/bin/pmset -g ps | awk '{ if (NR == 2) print $3 " " $4 }' | sed -e "s/;//g" -e "s/%//")
    if [[ -n $battery_info ]]; then
      local battery_quantity
      local battery
      battery_quantity="$(echo $battery_info | awk '{print $1}')"

      if [[ ! $battery_info =~ "discharging" ]]; then
        battery="#[bg=colour002,fg=black] ⚡ $battery_quantity% #[default]"
      elif (( $battery_quantity < 16 )); then
        battery="#[bg=red,fg=white] $battery_quantity% #[default]"
      else
        battery="#[bg=colour002,fg=black] $battery_quantity% #[default]"
      fi
    fi
  fi

  echo $battery
}


# Main
function main(){
  local load_avg=$(get_load_avg)
  local sound=$(get_sound_volume)
  local airport=$(get_airport_state)
  local battery=$(get_battery_state)

  echo "${load_avg}${airport}${sound} ${battery}"
}

main $@
