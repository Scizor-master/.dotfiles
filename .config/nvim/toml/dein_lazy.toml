#
# Deoplete
#
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertCharPre'
hook_source = '''
    call config#deoplete()
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_event = 'InsertCharPre'
on_ft = ['snippet']
hook_source = '''
    " Plugin keymappings
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    " For conceal markers
    if has('conceal')
        set conceallevel=2 concealcursor=niv
    endif
'''

# Deoplete sources
[[plugins]]
repo = 'zchee/deoplete-clang'
depends = ['deoplete.nvim']
on_ft = ['c', 'cpp', 'objc', 'objcpp', 'h']

[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = ['deoplete.nvim']
on_ft = ['python']

[[plugins]]
repo = 'zchee/deoplete-go'
depends = ['deoplete.nvim']
on_ft = ['go']

[[plugins]]
repo = 'mhartington/deoplete-typescript'
depends = ['deoplete.nvim']
on_ft = ['typescript']

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
depends = ['deoplete.nvim']
on_ft = ['javascript']

[[plugins]]
repo = 'zchee/deoplete-docker'
depends = ['deoplete.nvim']
on_ft = ['dockerfile']

[[plugins]]
repo = 'zchee/deoplete-zsh'
depends = ['deoplete.nvim']
on_ft = ['sh', 'zsh']

[[plugins]]
repo = 'Shougo/neco-vim'
depends = ['deoplete.nvim']
on_ft = ['vim']


#
# Denite
#
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
on_cmd = 'Denite'
build = ':UpdateRemotePlugins'
hook_add = '''
    " Prefix key
    nmap [denite] <Nop>
    nmap <Leader>d [denite]

    " Mappings
    nmap <silent> [denite]b :<C-u>Denite buffer -highlight-mode-insert=search<CR>
    nmap <silent> [denite]fm :<C-u>Denite file_mru -highlight-mode-insert=search<CR>
    nmap <silent> [denite]fr :<C-u>Denite file_rec -highlight-mode-insert=search<CR>
    nmap <silent> [denite]dm :<C-u>Denite directory_mru -highlight-mode-insert=search<CR>
    nmap <silent> [denite]dr :<C-u>Denite directory_rec -highlight-mode-insert=search<CR>
    nmap <silent> [denite]o :<C-u>Denite outline -highlight-mode-insert=search<CR>
    nmap <silent> [denite]r :<C-u>Denite register -highlight-mode-insert=search<CR>
'''
hook_source = '''
    call config#denite()
'''

[[plugins]]
repo = 'Shougo/neomru.vim'


#
# Git
#
[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = ['Git', 'Gcommit', 'Gstatus', 'Gdiff', 'Gblame', 'Glog']
hook_add = '''
    " Prefix key
    nmap [figitive] <Nop>
    nmap <Leader>g [figitive]

    " Mappings
    nnoremap <silent> [figitive]c :<C-u>Gcommit<CR>
    nnoremap <silent> [figitive]d :<C-u>Gdiff<CR>
    nnoremap <silent> [figitive]b :<C-u>Gblame<CR>
    nnoremap <silent> [figitive]l :<C-u>Glog<CR>
'''


#
# Linter
#
[[plugins]]
repo = 'w0rp/ale'
on_ft = [
    'c', 'cpp', 'objc', 'objcpp', 'h',
    'python',
    'go',
    'typescript', 'javascript',
    'html',
    'css', 'sass', 'scss'
    'dockerfile'
    'shell'
    'vim',
    'markdown',
]
hook_source = '''
    call config#ale()
'''


#
# Utilities
#
[[plugins]],
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'tyru/caw.vim'
on_map = ['<Plug>(caw:hatpos:toggle)']
hook_add = '''
    " Add comment to beginning line (consider whitespace)
    nmap <Leader>c <Plug>(caw:hatpos:toggle)
    vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = ['<Plug>(openbrowser-smart-search)']
hook_add = '''
    let g:netrw_nogx = 1 " Disable netrw's gx mapping.
    nmap <LocalLeader>ob <Plug>(openbrowser-smart-search)
    vmap <LocalLeader>ob <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = ['vimproc.vim']
on_cmd = 'QuickRun'
hook_source = '''
    call config#vimquickrun()
'''

[[plugins]]
repo = 'mattn/sonictemplate-vim'
on_cmd = 'Template'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
on_ft = ['markdown', 'toml', 'help']

[[plugins]]
repo = 'Shougo/context_filetype.vim'


# 
# Debug
#
[[plugins]]
repo = 'yuratomo/dbg.vim'
on_cmd = ['Dbg', 'DbgShell']


#
# Language Plugins
#
# Python
[[plugins]]
repo = 'davidhalter/jedi-vim'
depends = ['vim-virtualenv']
on_ft = ['python']

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python']

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python']

[[plugins]]
repo = 'lambdalisue/vim-django-support'
on_ft = ['python', 'djangohtml']

# Go
[[plugins]]
repo = 'faith/vim-go'
on_ft = ['go']
build = ':GoUpdateBinaried'

# Typescript
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript', 'tsx', 'typescript.tsx']

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = ['typescript', 'tsx', 'typescript.tsx']

# Javascript
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'es6']

# HTML, CSS
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'djangohtml', 'css']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']

[[plugins]]
repo = 'ap/vim-css-color'
on_ft = ['css']

# Markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add = '''
    let g:vim_markdown_folding_disabled = 0
    let g:vim_markdown_folding_level = 6
    let g:vim_markdown_nc_default_kwy_mappings = 0
    let g:vim_markdown_toc_autofit = 1
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_math = 1
    let g:vim_markdown_autowrite = 0
    let g:vim_markdown_edit_url_in = 'hsplit'

    augroup MarkdownCommands
        autocmd!
        autocmd Filetype markdown nnoremap <silent><LocalLeader>o :<C-u>Toc<CR>
    augroup END
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['markdown']
hook_add = '''
    let g:table_mode_corner = '|'
    let g:table_mode_always_active = 1
    let g:table_mode_syntax = 1
    let g:table_mode_auto_align = 1

    augroup TableCommands
        autocmd!
        autocmd Filetype markdown nnoremap <silent><LocalLeader>ra :<C-u>TableModeRealign<CR>
        autocmd Filetype markdown nmap <silent><LocalLeader>t :<C-u>Tableize<CR>
        autocmd FileType markdown vnoremap <silent><LocalLeader>t :<C-u>'<,'>Tableize<CR>
    augroup END
'''

[[plugins]]
repo = 'kannokanno/previm'
depends = ['open-browser.vim']
on_ft = ['markdown']
hook_add = '''
    nmap <LocalLeader>p :PrevimOpen<CR>
'''

# Toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# Json
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
