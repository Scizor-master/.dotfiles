#!/bin/bash
# -----------------------------------------------------------------------------
# Define functions
# -----------------------------------------------------------------------------
# general urilities
is_exists() {
  command -v "$1" >/dev/null 2>&1
  return $?
}

is_debug() {
  if [ "$DEBUG" = 1 ]; then
    return 0
  else
    return 1
  fi
}

e_newline() {
  printf "\n"
}

e_header() {
  printf "\033[37;1m%s\033[m\n" "$*"
}

e_error() {
  printf "\033[31m%s\033[m\n" "✗ $*" 1>&2 # U+2717
}

e_warning() {
  printf "\033[31m%s\033[m\n" "$*"
}

e_done() {
  printf "\033[37;1m%s\033[m...\033[32mOK\033[m\n" "✔ $*" # U+2714
}

e_arrow() {
  printf "\033[37;1m%s\033[m\n" "➔ $*" # U+2794
}

ink() {
  if [ "$#" -ne 2 ]; then
    echo 'Usage: ink <color> <text>'
    echo 'Colors:'
    echo '  black, red, green, yellow, blue, purple, cyan, gray'
    return 1
  else
    case "$1" in
      black)
        local color='0;30m'
        ;;
      red)
        local color='1;31m'
        ;;
      green)
        local color='1;32m'
        ;;
      yellow)
        local color='1;33m'
        ;;
      blue)
        local color='1;34m'
        ;;
      purple)
        local color='1;35m'
        ;;
      cyan)
        local color='1;36m'
        ;;
      gray)
        local color='0;37m'
        ;;
      *)
        echo "The specified color cannot be used."
        return 1
        ;;
    esac

    printf "\033[${color}$2\033[0m"
  fi
}

logging() {
  if [ "$#" -ne 2 ]; then
    echo 'Usage: logging <fmt> <msg>'
    echo 'Formatting options:' echo '  TITLE, ERROR, WARNING, INFO, SUCCESS'
    return 1
  fi

  local color=
  local text="$2"

  case "$1" in
    TITLE)
      color=cyan
      ;;
    INFO)
      color=blue
      ;;
    SUCCESS)
      color=green
      ;;
    WARNING)
      color=yellow
      ;;
    ERROR)
      color=red
      ;;
    *)
      text="$1"
      ;;
  esac

  timestamp() {
    ink gray "["
    ink purple "$(date +%H:%M:%S)"
    ink gray "]"
  }

  timestamp; ink "$color" "$text"; echo
}

log_echo() {
  logging TITLE "$1"
}

log_info() {
  logging INFO "$1"
}

log_pass() {
  logging SUCCESS "$1"
}

log_warning() {
  logging WARNING "$1"
}

log_fail() {
  logging ERROR "$1" 1>&2
}


# -----------------------------------------------------------------------------
# Install Dotfiles
# -----------------------------------------------------------------------------
dotfiles_logo='
      | |     | |  / _(_) |
    __| | ___ | |_| |_ _| | ___  ___
   / _` |/ _ \| __|  _| | |/ _ \/ __|
  | (_| | (_) | |_| | | | |  __/\__ \
   \__,_|\___/ \__|_| |_|_|\___||___/

   *** What is inside? ***
   1. Download https://github.com/scizorman/dotfiles.git
   2. Symlinking dot files to your home directory
   3. Execute all sh files within `etc/init` (optional)

   See the README for documentation.
   https://github.com/scizorman/dotfiles
'

if [ -z "${DOTFILES_PATH}" ]; then
  DOTFILES_PATH="$(cd $(dirname $(readlink $0 || echo $0))/../; pwd)"
  export DOTFILES_PATH
fi

# download
download_dotfiles() {
  if [ -d "$DOTFILES_PATH" ]; then
    log_fail "$DOTFILES_PATH: Already exists."
    exit 1
  fi

  e_newline
  e_header 'Downloading dotfiles...'

  if is_debug; then
    :
  else
    if is_exists 'git'; then
      git clone --recursive 'https://github.com/scizorman/dotfiles' $DOTFILES_PATH
    elif is_exists 'curl' || is_exists 'wget'; then
      local tarball='https://github.com/scizorman/dotfiles/archive/master.tar.gz'
      if is_exists 'curl'; then
        curl -L "$tarball"
      else
        wget -O - "$tarball"
      fi | tar xvz

      if [ ! -d dotfiles-master ]; then
        log_fail 'dotfiles_master: Not found'
        exit 1
        command mv -f dotfiles-master "$DOTFILES_PATH"
      fi
    else
      log_fail 'cURL or Wget required.'
      exit 1
    fi
  fi

  e_newline
  e_done 'Download'
}

# deploy
deploy_dotfiles() {
  e_newline
  e_header 'Deploying dotfiles...'

  if [ ! -d $DOTFILES_PATH ]; then
    log_fail "$DOTFILES_PATH: Not found"
    exit 1
  fi

  cd "$DOTFILES_PATH"

  if is_debug; then
    :
  else
    if [ -f Makefile ]; then
      make deploy
    else
      log_fail 'Makefile: Not found'
      exit 1
    fi
  fi

  e_newline
  e_done 'Deploy'
}

# initialize
initialize_dotfiles() {
  e_newline
  e_header 'Initializing dotfiles...'

  if is_debug; then
    :
  else
    if [ -f Makefile ]; then
      make init
    else
      log_fail 'Makefile: Not found'
      exit 1
    fi
  fi

  e_newline
  e_done 'Initialize'
}

# install
install_dotfiles() {
  download_dotfiles && deploy_dotfiles && initialize_dotfiles "$@"
}

if echo "$-" | grep -q 'i'; then
  VITALIZED=1
  export VITALIZED

  : return
else
  if [ "$0" = "${BASH_SOURCE:-}" ]; then
    exit
  fi

  if [ -n "${BASH_EXECUTION_STRING:-}" ] || [ -p /dev/stdin ]; then
    if [ "${VITALIZED:=0}" = 1 ]; then
      exit
    fi

    trap "e_error 'terminated; exit 1'" INT ERR
    echo "$dotfiles_logo"
    install_dotfiles "$@"

    if [ -p /dev/stdin ]; then
      e_warning 'Now continue with rebooting your shell.'
    else
      e_newline
      e_arrow 'Restarting your shell...'
      exec "${SHELL:-/bin/zsh}"
    fi
  fi
fi
